<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>虚拟机与ssh客户端配置</title>
      <link href="/2024/04/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Essh%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Essh%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="centos虚拟机"><a href="#centos虚拟机" class="headerlink" title="centos虚拟机"></a>centos虚拟机</h2><ul><li>采用的是网上的Centos7的iso文件，mini版本的Centos</li><li>在虚拟机中安装CentOS 7系统</li></ul><h3 id="配置系统网络"><a href="#配置系统网络" class="headerlink" title="配置系统网络"></a>配置系统网络</h3><p>编辑虚拟机设置 &gt; 网络适配器 &gt; 自定义 &gt; VMnet8（NAT 模式）<br>(&#x2F;img&#x2F;虚拟机1.png)</p><p>编辑&gt;虚拟网络设置</p><ul><li>将VMnet8改为NAT模式，启动DHCP 记住此时的子网ip<br>(&#x2F;img&#x2F;虚拟机2.png)</li></ul><p>设置该网络的NET</p><ul><li>记住网关地址<br>(&#x2F;img&#x2F;虚拟机3.png)</li></ul><h3 id="设置系统静态IP"><a href="#设置系统静态IP" class="headerlink" title="设置系统静态IP"></a>设置系统静态IP</h3><p>开启虚拟机 进入 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;，编辑ifcfg-ens33文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static<span class="comment">#改为静态</span></span><br><span class="line"></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=6eab4686-ca67-4038-95d3-f8994a7e294a</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span><span class="comment">#改为yes</span></span><br><span class="line"></span><br><span class="line">IPADDR=192.168.163.100<span class="comment">#添加静态IP地址，网段需要和步骤一中的子网IP网段一致</span></span><br><span class="line">NETMASK=255.255.255.0<span class="comment">#添加子网掩码</span></span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.163.2<span class="comment">#添加网关IP地址，和步骤一中的网关IP一致</span></span><br><span class="line">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure><p>此时，这台虚拟机的<strong>IP地址</strong>就被设置为 192.168.163.100</p><h3 id="配置虚拟机在本机的IP"><a href="#配置虚拟机在本机的IP" class="headerlink" title="配置虚拟机在本机的IP"></a>配置虚拟机在本机的IP</h3><p>网络和Internet &gt; 更改适配器选项<br>(&#x2F;img&#x2F;虚拟机4.png)<br>(&#x2F;img&#x2F;虚拟机5.png)</p><p>修改VMnet8的TCP&#x2F;IPv4的IP、掩码、网关</p><ul><li>IP地址要求网段与虚拟机系统的网段一致</li><li>网关与前保持一致<br>(&#x2F;img&#x2F;虚拟机6.png)</li></ul><h3 id="在MobarXterm中连接"><a href="#在MobarXterm中连接" class="headerlink" title="在MobarXterm中连接"></a>在MobarXterm中连接</h3><ul><li>要求IP设置与虚拟机系统IP一致，而不是与本机配置VMnet8的IP一致<br>(&#x2F;img&#x2F;虚拟机7.png)</li></ul><h2 id="ssh客户端——MobarXterm"><a href="#ssh客户端——MobarXterm" class="headerlink" title="ssh客户端——MobarXterm"></a>ssh客户端——MobarXterm</h2><p>由于在VMware界面中操作不友好，复制粘贴均已经失效，所以一般推荐使用ssh客户端</p><ul><li>Xshell：个人免费，商业收费</li><li>FinShell：基础功能免费，高级功能收费，内存占用高</li><li>MobarXterm： 基础功能免费，高级功能收费，内存占用低</li></ul><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://mobaxterm.mobatek.net/">官网地址</a><br>其中新建session的remote host需要与本机配置的静态ip一致</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://b11et3un53m.feishu.cn/wiki/FJAnwOhpIihMkLkOKQocdWZ7nUc">Linux环境搭建</a><br><a href="https://blog.csdn.net/ITMuscle/article/details/114275461">Xshell连接VMware虚拟机</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2024/04/07/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/07/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llama&amp;Qwen部署</title>
      <link href="/2024/04/07/llama-Qwen%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/04/07/llama-Qwen%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><a href="https://github.com/LlamaFamily/Llama-Chinese">Chinese Llama(使用中文预训练 + 微调的Atom版本)</a></p><ul><li>Chinese Llama只是在原始llama上微调，但是原始llama是使用英文数据进行预训练的，所以用中文微调效果肯定一般</li><li>Atom仅仅使用llama的结构，使用中文数据预训练 + 微调</li></ul><p><a href="https://github.com/QwenLM/Qwen">Qwen</a></p><h2 id="占用显卡资源"><a href="#占用显卡资源" class="headerlink" title="占用显卡资源"></a>占用显卡资源</h2><ul><li>一张3090Ti</li><li>使用int4 int8 fp16量化会占用更少的资源</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li><code>cuda &gt;= 11.6</code>， <code>flash-atten</code>要求</li><li>QWen实现了 history_chat功能</li><li>Atom需要按照他的prompt实现history_chat功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改模型词嵌入层（wte）</title>
      <link href="/2024/04/07/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E8%AF%8D%E5%B5%8C%E5%85%A5%E5%B1%82%EF%BC%88wte%EF%BC%89/"/>
      <url>/2024/04/07/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E8%AF%8D%E5%B5%8C%E5%85%A5%E5%B1%82%EF%BC%88wte%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>修改模型词嵌入的输入，（vocab_size, embedding_size）m使得模型可以解决多个任务，主要是vocab_size这个</p><span id="more"></span><p>报错解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: Error(s)<span class="keyword">in</span> loading state dict <span class="keyword">for</span> GPT2LMHeadModel:.</span><br><span class="line">size mismatch <span class="keyword">for</span> wte.weight: copying a param with shape torch,size([58257, 768]) from checkpoint, the shape <span class="keyword">in</span> current model is torch.size([78, 768]).</span><br></pre></td></tr></table></figure><ul><li>原始模型wte层维度为(58257, 768), 而想要其转换为我们所需的(78. 768)</li><li>初始化模型后直接使用  <code>model.resize_token_embeddings(len(tokenizer))</code> 来将wte层的维度设置为tokenizer相同大小</li></ul><p><img src="/img/wte%E6%8A%A5%E9%94%99.png" class="lazyload placeholder" data-srcset="/img/wte%E6%8A%A5%E9%94%99.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="配置代码块"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cross_entropy的输出及标签</title>
      <link href="/2024/04/07/cross-entropy%E7%9A%84%E8%BE%93%E5%87%BA%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
      <url>/2024/04/07/cross-entropy%E7%9A%84%E8%BE%93%E5%87%BA%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>对于交叉熵损失，模型的输出类型需要为torch.float32,而标签的类型也需要为torch.float32</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 常见报错 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器使用Clash</title>
      <link href="/2023/11/21/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8Clash/"/>
      <url>/2023/11/21/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8Clash/</url>
      
        <content type="html"><![CDATA[<p>解决访问被墙问题</p><span id="more"></span><h3 id="linux服务器使用clash"><a href="#linux服务器使用clash" class="headerlink" title="linux服务器使用clash"></a>linux服务器使用clash</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul><li>访问huggingface等被国内ban了的网址</li><li>后续如果想下载谷歌云盘的数据集时，也能够直接在服务器上操作，而无需借助本地主机做中转</li></ul><h4 id="Clash安装"><a href="#Clash安装" class="headerlink" title="Clash安装"></a>Clash安装</h4><p><strong>下载</strong></p><p>由于Clash仓库已经删库跑路，只能通过一些其他的方法地址进行Wget在线下载（建议新建一个clash文件夹执行此操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Github下载文件  已经删库</span></span><br><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.14.0/clash-linux-amd64-v1.14.0.gz</span><br><span class="line"><span class="comment"># 使用opclash下载</span></span><br><span class="line">wget https://git.opclash.com/kehuduan/clash/clash-linux-amd64-v1.14.0.gz</span><br></pre></td></tr></table></figure><p>在当前目录下出现一个clash-linux-amd64-v1.14.0.gz压缩包</p><p><strong>解压并重命名为clash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip clash-linux-amd64-v1.14.0.gz</span><br><span class="line"><span class="built_in">mv</span> clash-linux-amd64-v1.14.0 clash</span><br></pre></td></tr></table></figure><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p><strong>为clash添加可执行文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x clash</span><br></pre></td></tr></table></figure><p><strong>启动clash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash</span><br></pre></td></tr></table></figure><p>Clash 运行时需要 Country.mmdb 文件，当第一次启动 Clash 时（使用 .&#x2F;clash 命令） 会自动下载（会下载至 &#x2F;home&#x2F;XXX&#x2F;.config&#x2F;clash 文件夹下）。自动下载可能会因网络原因较慢，可以访问该<a href="https://github.com/Dreamacro/maxmind-geoip/releases">链接</a>手动下载。此时&#x2F;home&#x2F;XXX&#x2F;.config&#x2F;clash文件夹下会有三个文件：cache.db、config.yaml、Country.mmdb，我们需要使用自己使用的网络服务配置替换掉config.yaml中的内容。</p><h4 id="启动代理服务"><a href="#启动代理服务" class="headerlink" title="启动代理服务"></a>启动代理服务</h4><p><strong>先启动Clash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash</span><br></pre></td></tr></table></figure><p><strong>开启代理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p><strong>验证代理是否启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.google.com</span><br></pre></td></tr></table></figure><p>要验证代理是否有效，则可以选择平常无法访问的网站进行测试（有些网站不响应ping，所以使用curL会好一些） 。如果有字符输出则表示代理有效，能访问谷歌。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://opclash.com/article/302.html">https://opclash.com/article/302.html</a></li><li>[<a href="https://blog.iswiftai.com/posts/clash-linux/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86]">https://blog.iswiftai.com/posts/clash-linux/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86]</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lit-gpt 配置</title>
      <link href="/2023/10/25/lit-gpt-%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/10/25/lit-gpt-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>lit-gpt配置与使用</p><span id="more"></span><h3 id="lit-gpt使用"><a href="#lit-gpt使用" class="headerlink" title="lit-gpt使用"></a>lit-gpt使用</h3><h4 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a><a href="https://github.com/Lightning-AI/lit-gpt">github地址</a></h4><h4 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h4><p><strong>下载对应模型</strong></p><ul><li>命令行下载（存在无法访问的问题  需要翻墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python scripts/download.py --repo_id stabilityai/stablelm-base-alpha-3b</span><br></pre></td></tr></table></figure><ul><li>去<a href="https://huggingface.co/stabilityai/stablelm-tuned-alpha-3b">huggingface官网</a>下载,放入对应文件夹——checkpoint</li></ul><p><strong>解析对应格式</strong></p><blockquote><p>会生成对应 <code>lit_model.pth</code> 文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python scripts/convert_hf_checkpoint.py --checkpoint_dir checkpoints/stabilityai/stablelm-base-alpha-3b</span><br></pre></td></tr></table></figure><h4 id="模型微调"><a href="#模型微调" class="headerlink" title="模型微调"></a>模型微调</h4><p><strong>Prefix Tuning与LLaMA-Adapters</strong></p><ul><li><p>Prefix Tuning</p><ul><li>添加前缀指导模型的生成过程</li><li>前缀引导模型生成特定主题、风格或格式的文本</li></ul></li><li><p>LLaMA-Adapters 语言自适应模块</p><ul><li>在<strong>结构</strong>中添加自适应模块来增强模型的灵活性与可调节性</li><li>自适应模块是一个小型神经网络</li></ul></li></ul><p><strong>下载微调数据集</strong></p><ul><li>checkpoint_dir 指定为哪个模型准备Alpaca数据集<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python scripts/prepare_alpaca.py --checkpoint_dir checkpoints/stabilityai/stablelm-base-alpha-3b</span><br></pre></td></tr></table></figure></li></ul><p><strong>准备自己的数据集</strong> <a href="https://github.com/Lightning-AI/lit-gpt/blob/main/tutorials/finetune_adapter.md">网址</a></p><p><strong>相关参考</strong></p><ul><li><a href="https://lightning.ai/pages/community/article/understanding-llama-adapters/">从前缀微调到适配器 Understanding Parameter-Efficient Finetuning of Large Language Models: From Prefix Tuning to LLaMA-Adapters</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> GPT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件传值</title>
      <link href="/2023/09/26/Vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
      <url>/2023/09/26/Vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSR &amp; SSR</title>
      <link href="/2023/09/19/CSR-SSR/"/>
      <url>/2023/09/19/CSR-SSR/</url>
      
        <content type="html"><![CDATA[<p>服务端渲染 VS 客户端渲染</p><span id="more"></span><h3 id="客户端渲染-CSR"><a href="#客户端渲染-CSR" class="headerlink" title="客户端渲染 CSR"></a>客户端渲染 CSR</h3><p><img src="/img/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93.png" class="lazyload placeholder" data-srcset="/img/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="客户端渲染图流程图"><br>从图中可以看出，当用户打开一个链接时，向Web服务器请求对应的资源，请求到之后，解析HTML，下载对应的资源（CSS,JS）,所以，最开始获取的HTML一般而言只有一个根节点的容器，其余内容需要解析运行js脚本才能够渲染出来</p><h3 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 SSR"></a>服务端渲染 SSR</h3><p><img src="/img/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B2%E6%9F%93.png" class="lazyload placeholder" data-srcset="/img/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B2%E6%9F%93.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="服务器渲染流程图"><br>从浏览器角度而言，获得的HTML是完整的。完整的HTML有利于SEO,当使用搜索引擎去搜索一个问题时，搜索引擎会爬取所有相关的内容，对内容进行排序，而爬虫爬取的正是HTML，并且，SPA应用服务器响应的一般是只有根节点的容器，同时里面的内容在完成数据填充之后才有，爬虫才可以爬到。通过SSR响应的HTML是完整的，有利于爬虫的爬取。</p><h3 id="SSR应用场景"><a href="#SSR应用场景" class="headerlink" title="SSR应用场景"></a>SSR应用场景</h3><ul><li>SEO需求</li><li>需要首屏渲染速度快：因为服务端只需返回渲染好的HTML，这部分代码量很小，用户体验更好</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端八股 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tp-link联洲校招</title>
      <link href="/2023/09/17/Tp-link%E8%81%94%E6%B4%B2%E6%A0%A1%E6%8B%9B/"/>
      <url>/2023/09/17/Tp-link%E8%81%94%E6%B4%B2%E6%A0%A1%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="Tp-Link联洲24校园招聘"><a href="#Tp-Link联洲24校园招聘" class="headerlink" title="Tp-Link联洲24校园招聘"></a>Tp-Link联洲24校园招聘</h2><span id="more"></span><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3>]]></content>
      
      
      <categories>
          
          <category> 校招 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2023/09/15/My-New-Post/"/>
      <url>/2023/09/15/My-New-Post/</url>
      
        <content type="html"><![CDATA[<p>摘要</p><h2 id="2023-9-15"><a href="#2023-9-15" class="headerlink" title="2023&#x2F;9&#x2F;15"></a>2023&#x2F;9&#x2F;15</h2><span id="more"></span><p>第一篇test文章</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/15/hello-world/"/>
      <url>/2023/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
